#!/usr/bin/env ruby

def split(string)
  paragraphs = []
  paragraph = ""

  chars = string.chars

  chars.each_with_index do |char, i|
    prev = chars[i - 1]
    peek = chars[i + 1]

    if peek.nil?
      paragraphs << char
      paragraphs << paragraph
      # paragraph = ""
    elsif prev == "\n" && char == "\n" && peek != "\n"
      paragraph << char
      paragraphs << paragraph
      paragraph = ""
    elsif !char.nil?
      paragraph << char
    end
  end

  paragraphs
end

def wrap(paragraph, width)
  words = paragraph.split(/ +/).map do |word|
    word.gsub(/([^\n])\n([^\n])/, '\1 \2')
  end

  return [] if words.none?

  longest_word = words.max_by(&:length)

  if longest_word.length > width
    $stderr.puts <<EOF
Error! Bad width.

You specified a width of #{width} characters,
but input contained the word "#{longest_word}"
which has a length of #{longest_word.length}.

You must specify a width of at least #{longest_word.length}.
EOF
    exit 1
  end

  lines = []
  line = nil

  words.each do |word|
    possible_line = [line, word].compact.join(" ")
    if possible_line.length <= width
      line = possible_line
    else
      lines << line
      line = word
    end
  end

  lines << line
end

def justify(line, width)
  line = line.dup

  while line.length < width
    words = line.split(/ /)
    indexes = (0..(words.length - 2)).to_a
    return line if indexes.none?
    spaces_to_add = width - line.length
    indexes_of_words_to_space = indexes.shuffle.take(spaces_to_add)

    line = words.map.with_index do |word, index|
      if indexes_of_words_to_space.include?(index)
        "#{word} "
      else
        word
      end
    end.join(" ")
  end

  line
end

width = ARGV.shift.to_i
input = ARGF.read

paragraphs = split(input)

wrapped_paragraphs = paragraphs.map do |paragraph|
  wrap(paragraph, width)
end

justified_paragraphs = wrapped_paragraphs.map do |lines|
  if lines.length > 0
    last_line = lines.pop
    justified_lines = lines.map { |line| justify(line, width) }

    [
      justified_lines,
      last_line
    ].compact.reject(&:empty?).join("\n")
  else
    lines.first
  end
end

print justified_paragraphs.join
